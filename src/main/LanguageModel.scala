package main

import scala.collection.mutable.{Map => MutMap}

/**
 * A class used to compute the language model of a particular
 * document and then to score queries based on this model.
 *
 * @author Ivaylo Toskov
 */
object LanguageModel {
  // Collection frequencies
  var cf = MutMap[String, Int]()
  // The total number of terms in the collection
  var totalNumberOfTerms: Double = 0.0
  // The basis lambda value used for smoothing
  val lambda = 0.1

  /**
   * A method that computes a score proportional to the probability
   * that the given query was generated by the language model of the
   * given document.
   *
   * @param docTf The document frequencies for the corresponding
   *              document for which the probability is being computed.
   * @param query A query for which a score from the language model
   *              of the document is being computed.
   * @return A score based on the probability of the query being
   *         generated by the document's language model.
   */
  def score(docTf: Map[String, Int], query: List[String], docLength: Double) : Double = {
    query.map(word => TfIdf.log2((1 - lambda) * pwd(word, docTf, docLength) + lambda * pw(word) + 0.0000000001)).sum
  }

  /**
   * Initialize the collection frequencies.
   *
   * @param cfe The collection frequencies of the corpus.
   */
  def initCollectionStats(cfe: MutMap[String, Int]): Unit = {
    cf = cfe
    for(i <- cf.values)
      totalNumberOfTerms += i
  }

  /**
   * This method computes an estimated value proportional
   * to the probability that the given document has generated
   * the given word based on its number of occurrences.
   *
   * @param word The word for which the probability that it was
   *             generated by the given document is being computed.
   * @param docTf The document frequencies for the corresponding
   *              document for which the probability is being computed.
   * @param docLength The length of the given document. Corresponds to the sum
   *                  of the term frequencies of all of the words in the document.
   * @return Value proportional to the probability that the word was
   *         generated by the given document.
   */
  def pwd(word: String, docTf: Map[String, Int], docLength: Double): Double = {
    // Computes the word's term frequency divided by the sum of all term frequencies.
    // Corresponds to tf(w; d) / Sum_v tf(v; d)
    docTf.getOrElse(word, 0) / docLength
  }

  /**
   * Computes the relative frequency of the word in the whole collection.
   *
   * @param word Word whose relative frequency in the collection is computed.
   * @return Value that represents the relative frequency of the term
   *         in the collection.
   */
  def pw(word:String): Double = {
    cf.getOrElse(word, 0) / totalNumberOfTerms
  }
}
