package main

import ch.ethz.dal.tinyir.processing.TipsterParse

import scala.collection.mutable.{Map => MutMap}

/**
 * A class used to compute the language model of a particular
 * document and then to score queries based on this model.
 *
 * @author Ivaylo Toskov
 */
object LanguageModel {
  var cf = MutMap[String, Int]()
  var df = MutMap[String, Int]()

  /**
   * A method that computes a score proportional to the probability
   * that the given query was generated by the language model of the
   * given document.
   *
   * @param document A document for which the language model is computed
   *                 and used to evaluate the score for the given query.
   * @param query A query for which a score from the language model
   *              of the document is being computed.
   * @return A score based on the probability of the query being
   *         generated by the document's language model.
   */
  def score(document: TipsterParse, query: List[String]) : Double = {
    -1.0 // Implement
  }

  /**
   * Initialize the collection and document frequencies.
   *
   * @param cfe The collection frequencies of the corpus.
   * @param dfe The document frequencies of the corpus.
   */
  def initCollectionStats(cfe: MutMap[String, Int], dfe: MutMap[String, Int]): Unit = {
    cf = cfe
    df = dfe
  }
}
